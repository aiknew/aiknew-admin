name: aiknew-admin

services:
  postgres:
    container_name: aiknew-admin-postgres
    image: postgres:17.4-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=aiknew-admin
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - aiknew-admin
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'postgres', '-d', 'aiknew-admin']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: aiknew-admin-redis
    image: redis:7.4.5
    restart: always
    networks:
      - aiknew-admin
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  admin-api:
    build:
      context: .
      dockerfile: apps/admin-api/Dockerfile
    container_name: aiknew-admin-admin-api
    # ports:
    #   - 3000:3000
    environment:
      'NODE_ENV': 'production'
      'DOTENV_PRIVATE_KEY_PRODUCTION': 'dotenvx_private_key'

    restart: always
    networks:
      - aiknew-admin
    volumes:
      - app_data:/aiknew-admin/apps/admin-api/public/files
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  admin-ui:
    build:
      context: .
      dockerfile: apps/admin-ui/Dockerfile
    container_name: aiknew-admin-admin-ui
    depends_on:
      - admin-api
    ports:
      - 8080:80
    networks:
      - aiknew-admin
    restart: always

networks:
  aiknew-admin:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  app_data:
