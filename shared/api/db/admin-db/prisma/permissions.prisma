enum RequestMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  ALL
  OPTIONS
  HEAD
  SEARCH
  PROPFIND
  PROPPATCH
  MKCOL
  COPY
  MOVE
  LOCK
  UNLOCK
}

enum AdminPermissionSource {
  BUILT_IN
  EXTERNAL
}

model AdminUserRole {
  adminUser   AdminUser @relation(fields: [adminUserId], references: [id])
  adminUserId String
  adminRole   AdminRole @relation(fields: [adminRoleId], references: [id])
  adminRoleId String
  createdAt   DateTime  @default(now())

  @@id([adminUserId, adminRoleId])
}

model AdminRole {
  id           String                 @id @default(cuid(2))
  order        Int                    @default(100)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  users        AdminUserRole[]
  routes       AdminRoleRoute[]
  translations AdminRoleTranslation[]
}

model AdminRoleTranslation {
  adminRole   AdminRole @relation(fields: [adminRoleId], references: [id])
  adminRoleId String
  langs       Language  @relation(fields: [langKey], references: [key])
  langKey     String
  roleName    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([adminRoleId, langKey])
}

model AdminRoute {
  id           String                  @id @default(cuid(2))
  icon         String                  @default("") @db.VarChar(20)
  redirect     String                  @default("") @db.VarChar(50)
  hidden       Boolean                 @default(false)
  component    String                  @default("") @db.VarChar(100) // vue component file path
  type         RouteType               @default(GROUP)
  key          String                  @default("") @db.VarChar(20) // the permission identifier of the button
  status       Boolean                 @default(true)
  path         String                  @unique @default(nanoid()) @db.VarChar(100) // route path
  parentId     String                  @default("0") @db.VarChar(30)
  order        Int                     @default(100)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  roles        AdminRoleRoute[]
  permissions  AdminRoutePermission[]
  translations AdminRouteTranslation[]
}

model AdminRouteTranslation {
  route     AdminRoute @relation(fields: [routeId], references: [id])
  routeId   String
  langs     Language   @relation(fields: [langKey], references: [key])
  langKey   String
  routeName String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@id([routeId, langKey])
}

model AdminRoleRoute {
  role      AdminRole  @relation(fields: [roleId], references: [id])
  roleId    String
  route     AdminRoute @relation(fields: [routeId], references: [id])
  routeId   String
  createdAt DateTime   @default(now())

  @@id([roleId, routeId])
}

model AdminPermissionGroup {
  id              String                            @id @default(cuid(2))
  order           Int                               @default(100)
  controllerName  String?                           @unique @db.VarChar(100)
  source          AdminPermissionSource             @default(EXTERNAL)
  createdAt       DateTime                          @default(now())
  updatedAt       DateTime                          @updatedAt
  translations    AdminPermissionGroupTranslation[]
  AdminPermission AdminPermission[]
}

model AdminPermissionGroupTranslation {
  permissionGroup AdminPermissionGroup @relation(fields: [groupId], references: [id])
  groupId         String
  langs           Language             @relation(fields: [langKey], references: [key])
  langKey         String
  groupName       String               @db.VarChar(50)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@id([groupId, langKey])
}

model AdminPermission {
  id              String                       @id @default(cuid(2))
  key             String                       @db.VarChar(100)
  path            String?                      @db.VarChar(100)
  permissionGroup AdminPermissionGroup?        @relation(fields: [groupId], references: [id], onDelete: Restrict)
  groupId         String?
  method          RequestMethod?               @default(GET)
  source          AdminPermissionSource
  order           Int                          @default(100)
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  routes          AdminRoutePermission[]
  translations    AdminPermissionTranslation[]

  @@unique([path, method])
  @@unique([key])
}

model AdminPermissionTranslation {
  permission     AdminPermission @relation(fields: [permissionId], references: [id])
  permissionId   String
  langs          Language        @relation(fields: [langKey], references: [key])
  langKey        String
  permissionName String          @db.VarChar(50)
  remark         String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@id([permissionId, langKey])
}

model AdminRoutePermission {
  route        AdminRoute      @relation(fields: [routeId], references: [id])
  routeId      String
  permission   AdminPermission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([routeId, permissionId])
}
